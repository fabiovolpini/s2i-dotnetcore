#!/bin/bash

set -e
# Include filenames beginning with a '.' when installing the application source code.
shopt -s dotglob

if [ -n "${DOTNET_VERBOSITY}" ]; then
  echo "---> Environment:"
  env | sort
  VERBOSITY_OPTION="-v ${DOTNET_VERBOSITY}"
else
  VERBOSITY_OPTION=""
fi

echo "---> Installing application source..."
if [ -d /tmp/src ]; then
  mv /tmp/src/* ./
fi

if [ "$DEV_MODE" == true ]; then
  BUILD_TYPE=source
else
  if [ -n "${DOTNET_STARTUP_PROJECT}" -a -n "${DOTNET_STARTUP_ASSEMBLY}" ]; then
    echo "error: DOTNET_STARTUP_PROJECT and DOTNET_STARTUP_ASSEMBLY are both set"
    echo "Use DOTNET_STARTUP_PROJECT for source builds or DOTNET_STARTUP_ASSEMBLY for pre-built applications."
    exit 1
  fi

  # determine candidate source projects (PROJFILES) or pre-built entrypoint assembly (DOTNET_STARTUP_ASSEMBLY)
  if [ -n "${DOTNET_STARTUP_ASSEMBLY}" ]; then
    # binary build
    if [ ! -f "${DOTNET_STARTUP_ASSEMBLY}" ]; then
      echo "error: Source does not contain DOTNET_STARTUP_ASSEMBLY: ${DOTNET_STARTUP_ASSEMBLY}"
      exit 1
    fi
  else
    # source build
    PROJFILES=(`find "${DOTNET_STARTUP_PROJECT:-.}" -maxdepth 1 -name "*.??proj"`)
    # If we didn't find a project file, see if we can do a binary build instead.
    if [ -z "${DOTNET_STARTUP_ASSEMBLY}" -a ${#PROJFILES[@]} -eq 0 ]; then
      # determine entrypoint assembly based on *.runtimeconfig.json files
      RUNTIMECFGFILES=(`find -maxdepth 1 -name "*.runtimeconfig.json"`)
      if [ ${#RUNTIMECFGFILES[@]} -eq 1 ]; then
        DOTNET_STARTUP_ASSEMBLY="${RUNTIMECFGFILES[0]: : -19}.dll"
      elif [ ${#RUNTIMECFGFILES[@]} -gt 1 ]; then
        echo "error: Repository contains multiple startup assemblies"
        echo "You can select the startup assembly by specifying DOTNET_STARTUP_ASSEMBLY."
        exit 1
      fi
    fi
  fi

  if [ -n "${DOTNET_STARTUP_ASSEMBLY}" ]; then
    # binary build
    BUILD_TYPE=binary
    APP_DLL_NAME="${DOTNET_STARTUP_ASSEMBLY}"
    echo "Using pre-built application with entrypoint assembly: ${DOTNET_STARTUP_ASSEMBLY}"
  else
    # source build
    BUILD_TYPE=source
    if [ ${#PROJFILES[@]} -eq 1 ]; then
      # single project file
      DOTNET_STARTUP_PROJECT="${DOTNET_STARTUP_PROJECT:-.}"
      if [ -n "$DOTNET_ASSEMBLY_NAME" ]; then
        APP_DLL_NAME="${DOTNET_ASSEMBLY_NAME}.dll"
      else
        PROJFILE=$(basename ${PROJFILES[0]})
        APP_DLL_NAME="${PROJFILE: : -7}.dll"
      fi
    else
      # zero or more than 1 project files -> fail
      if [ ${#PROJFILES[@]} -eq 0 ]; then
        echo "error: DOTNET_STARTUP_PROJECT has no project file"
      else
        echo "error: DOTNET_STARTUP_PROJECT contains multiple project files"
      fi
      echo "You can specify the startup project by adding an '.s2i/environment' file to the source repository."
      # find all projects and strip leading './'
      PROJFILES=(`find -name "*.??proj" | sed "s|^\./||" | sort`)
      if [ ${#PROJFILES[@]} -eq 0 ]; then
        echo "The source repository has no project files."
      else
        echo "The source repository contains the following projects:"
        for PROJFILE in ${PROJFILES[@]}; do
          echo "- ${PROJFILE}"
        done
        echo "Update the '.s2i/environment' file to specify the project you want to publish, for example DOTNET_STARTUP_PROJECT=${PROJFILES[0]}".
      fi
      exit 1
    fi
  fi
fi

if [ "$BUILD_TYPE" == "source" ]; then
  echo "Using SDK: $(dotnet --version)"

  # Trust certificates from DOTNET_SSL_DIRS.
  echo "MIIDHjCCAgagAwIBAgIBEjANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1NTAyNjc3MTYwHhcNMTkwMjE1MjI0ODA3WhcNMjEwMjE0MjI0ODA4WjAbMRkwFwYDVQQDDBAqLmFwcC5hZGlxLmxvY2FsMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4yVgp/V9cD+eR8srRWOEX0lI/B2jiuhdrFhr7N3MBPjCDJ7ARQ1tmuhNc3bwTWZ3iazSF/mFY3Y5qBZ3Fh9CZH8panLDPWaZlqcsZKNKRynCwK8RN+8IObqNYaDtKE+1iw2gnB0nR0r8Q9gm33qtS+ituEmKUFJv/87mjG6sXRe3i/uyacG9sKZsDLuiWPVyuYTcFKONkSkj4GrHyWGN7Fp6dDU7pU40ZSNpEm0MNtGkro1jjMwh7MxJ0/Tp6qAUj9UEJWdDKCnWErJilxp1GVOnaHLhnj4nm89H6iK3xd4mo6RZUM6rGhSdLHqzCM3mDSX3xRUo4K7vOe4OjWtCYwIDAQABo2IwYDAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDAYDVR0TAQH/BAIwADArBgNVHREEJDAighAqLmFwcC5hZGlxLmxvY2Fsgg5hcHAuYWRpcS5sb2NhbDANBgkqhkiG9w0BAQsFAAOCAQEAjmga5kz5IoqhVktcXMivTBNHNz85k3UwP9L5arIkqGbCn2NP6Ru9bP57je7IKUL/VmOFQ2Oq5iQungw5QmnHVurYgvLxytI6PD+a93cnGNap3wmt2E3IjyW8Kq8hcsASt6QEYXwDO0zBMnUnAsNzkVPvCQg2pWUqlEufYG7+ Yw3Iw8XA4eLlfWWiBSEYrA5eihv5D8wJQjZQjQBs5Qqnt4DhRbnN7Fhsau9O6A8V9IxbuHuS8zgHOIg/2VEsRUN2/+1AvTvnkvyMt5+D0j6jOwBy19yT8XVxmAWzr6YCBQjUHmkkNoiQ9dvwZr1eirbWlopGEOJWsB8ra27KuDsP1A==" > /opt/app-root/etc/trust_ssl_dirs/cert1.crt
  echo "MIIC6jCCAdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1NTAyNjc3MTYwHhcNMTkwMjE1MjE1NTE2WhcNMjQwMjE0MjE1NTE3WjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1NTAyNjc3MTYwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDdZe/R3F//ycYptnIr6fcRdYzV3WaLo4d8nI0G4O8YiHfOEN3i6y0VmS8RqwEAVTaKIejwAXX/3agXT8uvld7TSYg0gIbcuaZgLxc+F3dvQTVAaVLVBK9AijOWdHEI+Bq8FPiXiPZHCOKVdu98Ex2gB0PEr4Obv1jBMlAkQtyLoh6k8ByuWNnKhDsjza4WyuL1mCCLUoqa0MAP8UZmyfdUKgqhuq1gXqoPKvPPkGy4KtT8xnNiIwYYdY6h3ZzPH4PmHwpABPy9DD0BObBSt0zjc62kP+Ltohpe/IvGz12dqHigE6rSO4ef1tUnrjeCT7KYsYY82HbE18Avmzg2tExRAgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBd6P0hMAEMzDJg1f++WibTbZ+V34GjwBdPYpEpqN9vovpB4qQTCbNcMrW1WWrCQUyKV+XmjHQRKT7lpfdAWzVlwM5j35DS2IA1eZFNttIgxZWm6DW5tS4pVPM+J8X5Y1o3My9QFucK25QLz9UlQyvO2P0GP1GEGFr9JoxZaaSd9/88tXudEdVoNBt/QqLiboknZhwhO0cW050/Jkgjy85BeUXUxUZmahVixS8843kn4mpHq4xl6IBB5uMCU4kOQxEjHGkQ0A/EIx1uyB9o1PsrjYU+4v3fKqAuI5UFkGWXFnh69qrcrcqoM2C8x6KIU7sTRWQwwc+gI+Zvb0Faov1t" > /opt/app-root/etc/trust_ssl_dirs/cert2.crt
  
  source /opt/app-root/etc/trust_ssl_dirs

  # npm
  if [ -n "${DOTNET_NPM_TOOLS}" ]; then
    echo "---> Installing npm tools..."

    if [ ! -z $HTTP_PROXY ]; then
      echo "---> Setting npm http proxy"
      npm config set proxy $HTTP_PROXY
    fi
    if [ ! -z $HTTPS_PROXY ]; then
      echo "---> Setting npm https proxy"
      npm config set https-proxy $HTTPS_PROXY
    fi
    if [ ! -z $NPM_MIRROR ]; then
      echo "---> Setting npm mirror"
      npm config set registry $NPM_MIRROR
    fi

    pushd /opt/app-root
    npm install ${DOTNET_NPM_TOOLS}
    popd
  fi

  # dotnet tools
  if [ -n "${DOTNET_TOOLS}" ]; then
    # Build nuget sources list for when doing the restore
    TOOL_RESTORE_OPTIONS=""
    if [ -d /tmp/artifacts/packages-for-incremental-build ]; then
      # use packages-for-incremental-build as a source
      TOOL_RESTORE_OPTIONS="$TOOL_RESTORE_OPTIONS --add-source file:///tmp/artifacts/packages-for-incremental-build"
    fi
    if [ -n "${DOTNET_RESTORE_SOURCES}" ]; then
      # `dotnet tool install` doesn't have a `--source` parameter that behaves like
      # `dotnet restore` (i.e. replacing vs adding sources). We generate a config file
      # to have the same behavior.
      cat >/tmp/ignore-global-nuget-sources <<EOF
<?xml version="1.0" encoding="utf-8"?>
<configuration>
<packageSources>
    <clear />
</packageSources>
</configuration>
EOF
      TOOL_RESTORE_OPTIONS="--configfile /tmp/ignore-global-nuget-sources"
      for SOURCE in $DOTNET_RESTORE_SOURCES; do
        TOOL_RESTORE_OPTIONS="$TOOL_RESTORE_OPTIONS --add-source $SOURCE"
      done
    fi

    for DOTNET_TOOL in $DOTNET_TOOLS; do
      # Split the tool by '@' and treat the second part as the version if there is one.
      DOTNET_TOOL_SPLIT=(${DOTNET_TOOL//@/ })
      DOTNET_TOOL_NAME=${DOTNET_TOOL_SPLIT[0]}
      if [ ${#DOTNET_TOOL_SPLIT[@]} -eq 1 ]; then
        DOTNET_TOOL_VERSION_OPTION=""
      else
        DOTNET_TOOL_VERSION_OPTION="--version ${DOTNET_TOOL_SPLIT[1]}"
      fi
      dotnet tool install -g $VERBOSITY_OPTION $TOOL_RESTORE_OPTIONS $DOTNET_TOOL_VERSION_OPTION $DOTNET_TOOL_NAME
    done
  fi
fi

if [ "$DEV_MODE" == true ]; then
  # fix permissions
  fix-permissions /opt/app-root

  exit 0
fi

if [ "$BUILD_TYPE" == "source" ]; then
  # User settable environment
  DOTNET_CONFIGURATION="${DOTNET_CONFIGURATION:-Release}"

  # Build nuget sources list for when doing the restore
  RESTORE_SOURCE_OPTIONS=""
  for SOURCE in $DOTNET_RESTORE_SOURCES; do
    RESTORE_SOURCE_OPTIONS="$RESTORE_SOURCE_OPTIONS --source $SOURCE"
  done
  INCREMENTAL_SOURCE_OPTION=""
  if [ -d /tmp/artifacts/packages-for-incremental-build ]; then
    INCREMENTAL_SOURCE_OPTION="--source file:///tmp/artifacts/packages-for-incremental-build"
  fi

  RESTORE_OPTIONS=""
  # If true, run dotnet restore with --disable-parallel
  if [ "$DOTNET_RESTORE_DISABLE_PARALLEL" = true ]; then
    RESTORE_OPTIONS="$RESTORE_OPTIONS --disable-parallel"
  fi

  # run tests
  for TEST_PROJECT in $DOTNET_TEST_PROJECTS; do
      echo "---> Restoring test project ($TEST_PROJECT) dependencies..."
      if [ -n "$INCREMENTAL_SOURCE_OPTION" ]; then
        # perform a restore against packages-for-incremental-build
        dotnet restore "$TEST_PROJECT" $RESTORE_OPTIONS $INCREMENTAL_SOURCE_OPTION $VERBOSITY_OPTION >/dev/null 2>&1 || true
      fi
      dotnet restore "$TEST_PROJECT" $RESTORE_OPTIONS $RESTORE_SOURCE_OPTIONS $VERBOSITY_OPTION
      echo "---> Running test project: $TEST_PROJECT..."
      dotnet test "$TEST_PROJECT" -f "$DOTNET_FRAMEWORK" $VERBOSITY_OPTION --no-restore
  done

  # publish application
  echo "---> Restoring application dependencies..."
  if [ -n "$INCREMENTAL_SOURCE_OPTION" ]; then
    # perform a restore against packages-for-incremental-build
    dotnet restore "$DOTNET_STARTUP_PROJECT" $RESTORE_OPTIONS $INCREMENTAL_SOURCE_OPTION $VERBOSITY_OPTION >/dev/null 2>&1 || true
  fi
  dotnet restore "$DOTNET_STARTUP_PROJECT" $RESTORE_OPTIONS $RESTORE_SOURCE_OPTIONS $VERBOSITY_OPTION
  echo "---> Publishing application..."
  dotnet publish "$DOTNET_STARTUP_PROJECT" -f "$DOTNET_FRAMEWORK" -c "$DOTNET_CONFIGURATION" $VERBOSITY_OPTION \
         --self-contained false /p:PublishWithAspNetCoreTargetManifest=false --no-restore -o "$DOTNET_APP_PATH"
else
  # binary build: move pre-compiled application
  mv ./* "$DOTNET_APP_PATH"
fi

# check if the assembly used by the script exists
if [ ! -f "$DOTNET_APP_PATH/${APP_DLL_NAME}" ]; then
  echo "error: Build output does not contain entrypoint assembly: ${APP_DLL_NAME}"
  exit 1
fi

# Create run script in publish folder
cat << EOF >"$DOTNET_APP_PATH/$DOTNET_DEFAULT_CMD"
#!/bin/bash

exec dotnet ${APP_DLL_NAME} \$@
EOF
chmod +x "$DOTNET_APP_PATH/$DOTNET_DEFAULT_CMD"

if [ "$DOTNET_PACK" == "true" ]; then
  echo "---> Packing application..."
  fix-permissions $DOTNET_APP_PATH
  tar -czf /opt/app-root/app.tar.gz -C $DOTNET_APP_PATH .
fi

# cleanup NuGet artifacts
DOTNET_INCREMENTAL="${DOTNET_INCREMENTAL:-false}"
if [ "$DOTNET_INCREMENTAL" == "true" ]; then
  mkdir /opt/app-root/packages-for-incremental-build
  find /opt/app-root/.nuget/packages -type f -maxdepth 3 -name '*.nupkg' -exec mv -t /opt/app-root/packages-for-incremental-build {} \+
fi
rm -rf /opt/app-root/{.nuget,.local}

if [ "$DOTNET_RM_SRC" == "true" ]; then
  echo "---> Removing sources..."
  rm -rf /opt/app-root/src/*
fi

# fix permissions
fix-permissions /opt/app-root
